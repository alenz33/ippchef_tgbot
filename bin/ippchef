#!/usr/bin/env python2
#  -*- coding: utf-8 -*-
# *****************************************************************************
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Module authors:
#   Alexander Lenz <fslenz@gmail.com>
#
# *****************************************************************************

import sys
import os
import argparse
import pwd
import grp

from os import path

import daemon
try:
    import daemon.pidlockfile as pidlockfile
except ImportError:
    import daemon.pidfile as pidlockfile

import mlzlog

# Add import path for inplace usage
sys.path.insert(0, path.abspath(path.join(path.dirname(__file__), '..')))

from ippchef.tgbot import Bot


def parseArgv(argv):
    '''
    Parse command line arguments.
    '''
    parser = argparse.ArgumentParser(
        description='IPP chef TG bot',
        conflict_handler='resolve')

    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='Verbose logging',
        default=False)
    parser.add_argument(
        '-d',
        '--daemonize',
        action='store_true',
        help='Daemonize process',
        default=False)
    parser.add_argument(
        '-w',
        '--working-directory',
        type=str,
        help='Working directory for daemon',
        default=os.getcwd())
    parser.add_argument(
        '-p',
        '--pid-file',
        type=str,
        help='Used pid file',
        default='/var/run/ippchef.pid')
    parser.add_argument(
        '-l',
        '--log-dir',
        type=str,
        help='Used pid file',
        default='/var/log')
    parser.add_argument(
        '-u',
        '--user',
        type=str,
        help='User for daemon',
        default=os.getlogin())
    parser.add_argument(
        '-g',
        '--group',
        type=str,
        help='Group for daemon',
        default=grp.getgrgid(os.getgid()).gr_name)
    parser.add_argument(
        '--jid',
        help='Own jabber id',
        type=str,
        default=os.getenv('JID'))
    parser.add_argument(
        '--jpw',
        help='Jabber password',
        type=str,
        default=os.getenv('JPW'))
    parser.add_argument(
        '--djid',
        help='Destination jabber id',
        type=str,
        default=os.getenv('DJID'))
    parser.add_argument(
        '--api-key',
        help='Telegram API key',
        type=str,
        default=os.getenv('TG_API_KEY'))

    return parser.parse_args(argv)


def main(argv=None):
    if argv is None:
        argv = sys.argv

    args = parseArgv(argv[1:])

    loglevel = 'debug' if args.verbose else 'info'
    mlzlog.initLogging('ippchef', loglevel, args.log_dir)

    if args.daemonize:
        uid = pwd.getpwnam(args.user).pw_uid
        gid = grp.getgrnam(args.group).gr_gid

        if not os.path.isdir(os.path.dirname(args.pid_file)):
            os.makedirs(os.path.dirname(args.pid_file))
        pidfile = pidlockfile.TimeoutPIDLockFile(args.pid_file, 3)

        mlzlog.log.info('Daemonizing as %s:%s (%s:%s) ...'
                        % (args.user, args.group, uid, gid))

        with daemon.DaemonContext(files_preserve=mlzlog.log.getLogfileStreams(),
                                  working_directory=args.working_directory,
                                  pidfile=pidfile,
                                  uid=uid,
                                  gid=gid):
            try:
                mlzlog.log.info('Daemonized successfully')
                bot = Bot(mlzlog.log, args.api_key, args.jid, args.jpw, args.djid)
                bot.run()
            except Exception as e:
                with open('/tmp/tmplog.log', 'w') as f:
                    f.write(str(e))
    else:
        bot = Bot(mlzlog.log, args.api_key, args.jid, args.jpw, args.djid)
        bot.run()

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
